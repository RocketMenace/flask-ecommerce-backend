services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env

  # Flask Application
  app:
    build: .
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # Celery Worker
  celery:
    build: .
    command: celery -A app.core.celery worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  # Celery Beat (for periodic tasks)
  celery-beat:
    build: .
    command: celery -A app.core.celery beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  # Flower (Celery monitoring)
  flower:
    build: .
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env

volumes:
  postgres_data: